import:
	org.bukkit.event.inventory.InventoryDragEvent
	org.bukkit.event.inventory.DragType

on InventoryDragEvent:
	set {_type::player} to event.getView().getPlayer()
	set {_type::location} to {_type::player}.getLocation()
	set {_type::world} to {_type::player}.getWorld()

	set {_data::drag_type} to event.getType().toString()
	set {_data::old_cursor} to event.getOldCursor()
	set {_data::new_cursor} to event.getCursor()
	set {_data::slots_index} to event.getInventorySlots()
	set {_data::raw_slots_index} to event.getRawSlots()

	set {_inv.slotAmount} to ExprInventorySlotAmount( event.getInventory() )
	if {_inv.slotAmount} > 0:
		set {_index::*} to ...{_data::slots_index}
		set {_index.raw::*} to ...{_data::raw_slots_index}
		loop amount of {_index::*} times:
			set {_index} to {_index.raw::%loop-number%}
			if {_index} < {_inv.slotAmount}:
				set {_inv::1} to event.getInventory() if {_inv::1} is not set
			else:
				set {_inv::2} to {_type::player}.getInventory() if {_inv::2} is not set
			if number of {_inv::*} is 2:
				stop loop
		set {_data::event.inventories} to [ {_inv::*} ]

	set {_data::new_items} to event.addedItems

	set {_event} to new custom event "InventoryDragEvent" with {_type::*} data {_data::*}
	call {_event}

	if event.getCursor() is not {_event}.getData("new_cursor"):
		event.setCursor( {_event}.getData("new_cursor") )
	event.setCancelled({_event}.isCancelled())
	
event "InventoryDragEvent":
	pattern: inventory drag
	event-values: player, location, world

plural expression drag[ged] inventor(y|yes|ies):
	usable in:
		custom event "InventoryDragEvent"
	return type: inventories
	get:
		return ...event.getData("event.inventories")

condition %inventory% is in %inventories%:
	usable in:
		custom event "InventoryDragEvent"
	check:
		loop ...expr-2:
			loop-value is expr-1
			continue

plural expression indexes of drag[ged] slots:
	usable in:
		custom event "InventoryDragEvent"
	return type: integers
	loop of: integer
	get:
		return ...event.getData("slots_index")

plural expression indexes of drag[ged] slots (in|at) %inventory%:
	usable in:
		custom event "InventoryDragEvent"
	return type: integers
	loop of: integer
	get:
		set {_inv::*} to ...event.getData("event.inventories")
		if size of {_inv::*} is 1:
			if {_inv::*} is expr-1:
				return ...event.getData("slots_index")
		else:
			set {_inv.slotAmount} to ExprInventorySlotAmount( {_inv::1} )
			set {_raw_slot::*} to ...event.getData("raw_slots_index")
			loop {_raw_slot::*}:
				set {_index} to loop-value - {_inv.slotAmount}
				if {_index} < 0:
					add loop-value to {_slots::1::*}
				else:
					if {_index} < 27:
						add {_index} + 9 to {_slots::2::*}
					else:
						add {_index} - 27 to {_slots::2::*}
			loop {_inv::*}:
				loop-value is expr-1
				return sorted {_slots::%loop-index%::*}
		return {_null}

plural expression indexes of drag[ged] raw slots:
	usable in:
		custom event "InventoryDragEvent"
	return type: integers
	loop of: integer
	get:
		return ...event.getData("raw_slots_index")

expression (former|past|old) [state] [of] cursor:
	usable in:
		custom event "InventoryDragEvent"
	return type: item
	get:
		return event.getData("old_cursor")

expression [(future|to-be|new)] [state] [of] cursor:
	usable in:
		custom event "InventoryDragEvent"
	return type: item
	get:
		return event.getData("new_cursor") otherwise air
	set:
		event.setData("new_cursor", change value)

plural expression drag[ged] items:
	usable in:
		custom event "InventoryDragEvent"
	return type: item
	get:
		return ...event.getData("new_items").values()

expression drag type:
	usable in:
		custom event "InventoryDragEvent"
	return type: object
	get:
		return event.getData("drag_type")

expression slot amount of %inventory%:
	return type: integer
	get:
		return ExprInventorySlotAmount(expr-1)

function ExprInventorySlotAmount(inv:inventory) :: integer:
	set {_type} to type of {_inv}
	if {_type} is beacon inventory:
		return 1
	else if {_type} is enchanting table inventory or stonecutter inventory:
		return 2
	else if {_type} is grindstone inventory or cartography table inventory, furnace inventory, blast furnace inventory, smoker inventory, anvil inventory, smithing inventory:
		return 3
	else if {_type} is loom inventory:
		return 4
	else if {_type} is brewing stand inventory or hopper inventory:
		return 5
	else if {_type} is workbench inventory:
		return 10
	else if {_type} is chest inventory or player inventory, ender chest inventory, barrel inventory, shulker box inventory, dispenser inventory, dropper inventory, crafting table inventory:
		set {_rows} to rows of {_inv}
		return round {_rows} * 9
	else:
		return -1

# on inventory drag:
# 	# 드래그 된 인벤토리
# 	set {_inv::*} to drag inventories
# 	loop {_inv::*}:
# 		send "드래그 한 인벤토리=[%loop-value%]" to console
# 		send "타입=[%type of loop-value%]" to console
# 		send "슬롯 개수=[%slot amount of loop-value%]" to console

# 	# 인벤토리 포함여부
# 	if open inventory is in drag inventories:
# 		send "    드래그 한 인벤토리가 열려있는 인벤토리를 포함" to console
# 	if inventory of player is in drag inventories:
# 		send "    드래그 한 인벤토리가 플레이어의 인벤토리를 포함" to console

# 	# 드래그 타입
# 	set {_type} to drag type
# 	if {_type} is "even":
# 		send "    드래그 타입=[%{_type}%], 균등 분배" to console
# 	else if {_type} is "single":
# 		send "    드래그 타입=[%{_type}%], 하나씩 분배" to console
	
# 	# 커서 아이템
# 	set {_cursor.old} to old cursor
# 	set {_cursor.new} to new cursor
# 	send "    커서=이벤트 이전[%{_cursor.old}%], 이벤트 이후[%{_cursor.new}%]" to console

# 	# 슬롯 번호
# 	set {_indexes::*} to indexes of drag slots
# 	set {_indexes_in_open::*} to indexes of drag slots in open inventory
# 	set {_indexes_in_player::*} to indexes of drag slots in inventory of player
# 	set {_indexes.raw::*} to indexes of drag raw slots
# 	send "    드래그 된 슬롯 번호=[%{_indexes::*}%]" to console
# 	send "    열린 인벤토리에서 드래그 된 슬롯 번호=[%{_indexes_in_open::*}%]" to console
# 	send "    플레이어 인벤토리에서 드래그 된 슬롯 번호=[%{_indexes_in_player::*}%]" to console
# 	send "    전체 슬롯 기준에서 드래그 된 슬롯 번호=[%{_indexes.raw::*}%]" to console

# 	# 드래그로 나누어진 아이템 리스트
# 	set {_new_items::*} to drag items
# 	send "    드래그로 나누어진 아이템=[%{_new_items::*}%]" to console